Parameters:
    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String
    InstanceType:
        Description: 
            "The EC2 instance type of general purpose"
        Type: String
        AllowedValues: [t2.medium, t3.small, t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge]
   # KeyJenkinsSSH:
    #    Description: KeyName to access jenkins host
     #   Type: "AWS::EC2::KeyPair::KeyName"
Resources:
  
#Create IAM Rule To Access S3 Bucket
    UdacityS3ReadOnlyEC2:
        Type: AWS::IAM::Role
        Properties:
            RoleName: 
                !Sub ${EnvironmentName}-Role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: Allow
                    Principal:
                        Service:
                        - ec2.amazonaws.com
                    Action:
                    - sts:AssumeRole
            Path: "/"

    RolePolicies:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: AmazonS3ReadOnlyAccess
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - 
                    Effect: Allow
                    Action: 
                    -   s3:Get*
                    -   s3:List*
                    Resource: 
                    -   arn:aws:s3:::udacity-demo-1
                    -   arn:aws:s3:::udacity-demo-1/*
            Roles:
              -   Ref: UdacityS3ReadOnlyEC2

    RootInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
            - Ref: UdacityS3ReadOnlyEC2

#Create Security Groups 

    LoadBalancerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http traffic to and from load balancer
        VpcId:
            Fn::ImportValue:
                !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        -   IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        -   IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http and SSH to our hosts
        VpcId:
           Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

#create Autoscaling  and load balancer 
    WebAppLaunchConfig: 
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install unzip awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://udacity-demo-1/udacity.zip .
                    unzip -o udacity.zip
            ImageId: ami-003634241a8fcdec0
            IamInstanceProfile: !Ref RootInstanceProfile
            SecurityGroups:
            -   Ref: WebServerSecGroup
            InstanceType: !Ref 'InstanceType'
            BlockDeviceMappings:
            -   DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: '10' #10GB

 #   WebAppGroup:
  #      Type: AWS::AutoScaling::AutoScalingGroup
   #     Properties:
    #        VPCZoneIdentifier:  
     #       -   Fn::ImportValue: 
      #              !Sub "${EnvironmentName}-PUB-NETS"
       #     LaunchConfigurationName:
        #        Ref: WebAppLaunchConfig
         #   MinSize: '2'
          #  MaxSize: '4'
           # TargetGroupARNs:
            #-   Ref: WebAppTargetGroup

#    WebAppTargetGroup:
 #       Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #      Properties:
   #         HealthCheckIntervalSeconds: 10
    #        HealthCheckPath: /
     #       HealthCheckProtocol: HTTP
      #      HealthCheckTimeoutSeconds: 8
       #     HealthyThresholdCount: 2
        #    Port: 80
         #   Protocol: HTTP
          #  UnhealthyThresholdCount: 5
           # VpcId:
            #  Fn::ImportValue:
             #       !Sub "${EnvironmentName}-VPCID"
#    WebAppLB:
 #       Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #      Properties:
   #         SecurityGroups:
    #        - Ref: LoadBalancerSecGroup
     #       Subnets:
      #      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
       #     - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
 #   Listener:
  #      Type: AWS::ElasticLoadBalancingV2::Listener
   #     Properties:
    #        DefaultActions:
     #       -   Type: forward
      #          TargetGroupArn:
       #             Ref: WebAppTargetGroup
        #    LoadBalancerArn:
         #       Ref: WebAppLB
          #  Port: 80
           # Protocol: HTTP
#    ALBListenerRule:
 #       Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #      Properties:
   #         Actions:
    #        -   Type: forward
     #           TargetGroupArn: !Ref 'WebAppTargetGroup'
      #      Conditions:
       #     -   Field: path-pattern
        #        Values: [/]
         #   ListenerArn: !Ref 'Listener'
          #  Priority: 1
#Outputs:
 #   WebAppLoadBalancerDNSName:
  #      Description: DNS name or Public URL of the Load Balancer
   #     Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
    #    Export:
     #       Name: !Sub ${EnvironmentName}-LB-DNSName

    CapstoneEc2:
        Type: AWS::EC2::Instance
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt-get update -y
                    sudo apt-get install default-jdk wget -y
                    cd /home/ubuntu
                    wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
                    sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
                    sudo apt-get update -y
                    sudo apt-get install jenkins tidy -y
                    sudo systemctl status jenkins
            SecurityGroupIds:
              - Ref: WebServerSecGroup
            SubnetId:
                Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            BlockDeviceMappings:
             - DeviceName: "/dev/sdk"
               Ebs:
                VolumeSize: "10"
                DeleteOnTermination: true
                VolumeType: "gp2"
            ImageId: ami-0ba60995c1589da9d
            InstanceType: t3.small
            KeyName: "jenkins"
           